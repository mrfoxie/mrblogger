{"title":"ROS on Raspberry PI 4","uid":"c601b2148c89b59e805cddcc779a5245","slug":"ROS-on-RaspberryPI4","date":"2022-10-17T01:36:04.000Z","updated":"2023-02-05T12:34:57.386Z","comments":true,"path":"api/articles/ROS-on-RaspberryPI4.json","keywords":null,"cover":"https://www.tertiarycourses.com.sg/media/catalog/product/cache/1/image/512x/040ec09b1e35df139433887a97daa66f/r/o/ros-raspberry-pi.jpg","content":"<p><img src=\"https://www.tertiarycourses.com.sg/media/catalog/product/cache/1/image/512x/040ec09b1e35df139433887a97daa66f/r/o/ros-raspberry-pi.jpg\" alt=\"ROS\"></p>\n<h1 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h1><p>We will be install ROS on Raspberry PI 4 without Ubuntu. In this tutorial we we will be using docker insted of using ubuntu or any other software.</p>\n<h1 id=\"Requirments\"><a href=\"#Requirments\" class=\"headerlink\" title=\"Requirments\"></a>Requirments</h1><ul>\n<li>Laptop or Desktop</li>\n<li>Stable internet connection(Mobile or Router no matter which connection is it)</li>\n<li>Raspberry Pi with 4GB+ ram (mine is Raspberry Pi 4 B+ model with 8GB of ram)</li>\n<li>MicroSD card with a minimum of 32GB size</li>\n<li>Power supply (power bank or cell phone adaptor)</li>\n<li>MicroB to HDMI with monitor(optional) if you’re going to use a monitor then you will be needing of keyboard</li>\n<li>And most important thing a cup of <a href=\"https://www.buymeacoffee.com/mistrysiddh\">coffee</a></li>\n</ul>\n<h1 id=\"Step-1-Hardware-setup\"><a href=\"#Step-1-Hardware-setup\" class=\"headerlink\" title=\"Step 1 - Hardware setup\"></a>Step 1 - Hardware setup</h1><p>Ok first of all we need some software which will help us to flash memory card so that we can install os in the memory card to boot in pi.</p>\n<p><img src=\"/images/posts/raspberry-pi.png\" alt=\"Raspberry pi software\"></p>\n<p>Go to <a href=\"https://www.raspberrypi.com/software/\">https://www.raspberrypi.com/software/</a> and download software according to your OS I’m using Zorin OS which is based on Ubuntu so I will be using the terminal. If you are using terminal use the following command</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo apt install rpi-imager<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>as you can see in the below image I have already installed it on my device<br><img src=\"/images/posts/terminal-pi.png\" alt=\"Terminal\"></p>\n<p>Go ahead and open it up after opening it up plugin your 8GB or higher sd card on your laptop. as you can see in the image I have inserted 8GB of card<br><img src=\"/images/posts/disk-pi.png\" alt=\"Disk\"></p>\n<p>Now do the following steps as soon in the photo’s </p>\n<p><img src=\"/images/posts/raspberrypi-software.png\" alt=\"Disk\"></p>\n<p><img src=\"/images/posts/raspberrypi-software1.png\" alt=\"Disk\"><br>Select <strong>Raspberry Pi OS(other)</strong></p>\n<p><img src=\"/images/posts/raspberrypi-software2.png\" alt=\"Disk\"><br>Then select <strong>Raspberry Pi OS with desktop</strong></p>\n<p><img src=\"/images/posts/raspberrypi-software3.png\" alt=\"Disk\"></p>\n<p>Now select your disk but before writing your os we will configure it first so that we don’t have to connect any kind of ethernet cable or mini Wi-Fi. Press <code>ALT + SHIFT + X</code> to open secret setting </p>\n<p><img src=\"/images/posts/raspberrypi-software4.png\" alt=\"Disk\"><br><strong>Note:</strong> set your hostname and remember it we will be needing it later</p>\n<p><img src=\"/images/posts/raspberrypi-software5.png\" alt=\"Disk\"><br>Click on Yes and let it complete it. After that, you will be granted this message so it means that it is been completed.</p>\n<p><img src=\"/images/posts/raspberrypi-software6.png\" alt=\"Disk\"></p>\n<h1 id=\"Step-2-Booting-UP\"><a href=\"#Step-2-Booting-UP\" class=\"headerlink\" title=\"Step 2 - Booting UP\"></a>Step 2 - Booting UP</h1><p>Remove your memory card from the computer and plug that it into pi and power it on, well as the pi is doing some process grab a cup of <a href=\"https://www.buymeacoffee.com/mistrysiddh\">coffee</a> and wait for a few minutes.</p>\n<p><img src=\"https://gifimage.net/wp-content/uploads/2018/11/gif-a-few-moment-later.gif\" alt=\"A few moments later\"></p>\n<p>Open up your terminal and enter the following command</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># as you remember I have told you to set your hostname in the software and remember it.</span>\n<span class=\"token function\">ssh</span> pi@hostname.local<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>Replace your hostname with the hostname you have set while preparing the sd card. In my case, I have set my hostname with datacenter so my command will be like this</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">ssh pi@datacenter.local<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"/images/posts/terminal-pi-login.png\" alt=\"Pi Login\"></p>\n<p>as soon as you hit enter it will as you for a conformation like this</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">~ ➤ ssh pi@datacenter.local                                                   \nThe authenticity of host 'datacenter.local (192.168.32.200)' can't be established.\nECDSA key fingerprint is SHA256:VlnqrEfP5pLc62h2TQbN0Z4pEudRsmRQL4+LqDD6ZB8.\nAre you sure you want to continue connecting (yes/no/[fingerprint])?<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>answer it with <strong>yes</strong> after that it will as you for a password which we have set during the software installation. As you have given the password right then you will see that you have been login into your account successfully like I did.</p>\n<p><img src=\"/images/posts/pi-login.png\" alt=\"Pi Login Successful\"></p>\n<p>Congratulation we have been login successfully into our pi take a break grab a cup of <a href=\"https://www.buymeacoffee.com/mistrysiddh\">coffee</a> and relax.</p>\n<h1 id=\"Step-3-Software-setup\"><a href=\"#Step-3-Software-setup\" class=\"headerlink\" title=\"Step 3 - Software setup\"></a>Step 3 - Software setup</h1><p>As we successfully login into pi first we will update the repository as well as we will be upgrading it by the following command don’t worry if you haven’t used Linux in your life this will be your first experience as well as it will be really easy just follow my steps.</p>\n<h2 id=\"Update-and-Upgradation-of-packages\"><a href=\"#Update-and-Upgradation-of-packages\" class=\"headerlink\" title=\"Update and Upgradation of packages\"></a>Update and Upgradation of packages</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> upgrade <span class=\"token parameter variable\">-y</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> full-upgrade <span class=\"token parameter variable\">-y</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>The above command will update the repositories as well as it will be upgrading all the packages which are outdated so that we don’t get any kind of error while installing. It will take a few minutes after all the process is completed we will check once again if there is any software that is left to upgrade by the following command.</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> list <span class=\"token parameter variable\">--upgradable</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>The following command will check whether any package is upgradable or not, if its all upgrade then it will return it with this message</p>\n<p><img src=\"/images/posts/pi-updated.png\" alt=\"Pi updated\"></p>\n<h2 id=\"Package-Installation\"><a href=\"#Package-Installation\" class=\"headerlink\" title=\"Package Installation\"></a>Package Installation</h2><p>Now we will install some few pre-required software so that we will use it properly. Follow me oh and don’t forget your cup of <a href=\"https://www.buymeacoffee.com/mistrysiddh\">coffee</a> ;)</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">nano</span> <span class=\"token function\">wget</span> <span class=\"token function\">git</span> <span class=\"token function\">curl</span> <span class=\"token function\">htop</span> <span class=\"token parameter variable\">-y</span>\n<span class=\"token function\">sudo</span> init <span class=\"token number\">6</span> <span class=\"token comment\"># this command will restart your Raspberry PI4</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Step-4-Getting-docker\"><a href=\"#Step-4-Getting-docker\" class=\"headerlink\" title=\"Step 4 - Getting docker\"></a>Step 4 - Getting docker</h1><p>There is a script which will help us to easily install docker on our PI without any command just a single command and then run it. Right simple as it says lets give it a run.</p>\n<p>Download the following scipt</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-fsSL</span> https://get.docker.com <span class=\"token parameter variable\">-o</span> get-docker.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>After downloading it script rut it with super user permission(root access)</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">bash</span> get-docker.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>Grab your cup of <a href=\"https://www.buymeacoffee.com/mistrysiddh\">coffee</a> and wait till the installtion is over</p>\n<p>Once Docker is installed, add your login user to the docker group with the following command:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">usermod</span> <span class=\"token parameter variable\">-aG</span> <span class=\"token function\">docker</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">whoami</span><span class=\"token variable\">)</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>For our safty we will reboot out PI for external changes</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> init <span class=\"token number\">6</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>After rebooting just check docker verion by following command:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> version <span class=\"token comment\"># if the following command wont work then add sudo in front of it</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>This is the following version which im running right now:</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">docker version\nClient: Docker Engine - Community\n Version:           20.10.19\n API version:       1.41\n Go version:        go1.18.7\n Git commit:        d85ef84\n Built:             Thu Oct 13 16:45:42 2022\n OS/Arch:           linux/arm64\n Context:           default\n Experimental:      true\n\nServer: Docker Engine - Community\n Engine:\n  Version:          20.10.19\n  API version:      1.41 (minimum version 1.12)\n  Go version:       go1.18.7\n  Git commit:       c964641\n  Built:            Thu Oct 13 16:44:07 2022\n  OS/Arch:          linux/arm64\n  Experimental:     false\n containerd:\n  Version:          1.6.8\n  GitCommit:        9cd3357b7fd7218e4aec3eae239db1f68a5a6ec6\n runc:\n  Version:          1.1.4\n  GitCommit:        v1.1.4-0-g5fd4c4d\n docker-init:\n  Version:          0.19.0\n  GitCommit:        de40ad0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Step-5-Installing-Docker-composer\"><a href=\"#Step-5-Installing-Docker-composer\" class=\"headerlink\" title=\"Step 5 - Installing Docker composer\"></a>Step 5 - Installing Docker composer</h1><p>Docker Compose is a tool for automating Docker projects using a YAML file. With the help of thi file you can create many project from scratch as I did.</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> python3-pip <span class=\"token parameter variable\">-y</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>PIP</code> is a tool which will help us to install docker composer. If it already install then we will move on to the next step</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> pip3 <span class=\"token function\">install</span> <span class=\"token function\">docker-compose</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>After installing docker composer we will check wheather it is installed properly or not</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">docker-compose version\ndocker-compose version 1.29.2, build unknown\ndocker-py version: &lt;module 'docker.version' from '/usr/local/lib/python3.10/dist-packages/docker/version.py'>\nCPython version: 3.10.7\nOpenSSL version: OpenSSL 3.0.5 5 Jul 2022<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Step-6-Installation-of-ROS-semi-final-step\"><a href=\"#Step-6-Installation-of-ROS-semi-final-step\" class=\"headerlink\" title=\"Step 6 - Installation of ROS (semi-final step)\"></a>Step 6 - Installation of ROS (semi-final step)</h1><p>Before going further we will just give it a reboot so that we make sure that everything is working propely</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> init <span class=\"token number\">6</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>As we have rebooted our system we will now search for our docker repository by using docker search command</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> search siddhmistry\nNAME                   DESCRIPTION              STARS     OFFICIAL   AUTOMATED\nsiddhmistry/mrfoxie                             <span class=\"token number\">0</span>                    \nsiddhmistry/ros_rpi4   ROS <span class=\"token keyword\">for</span> Raspberry PI <span class=\"token number\">4</span>   <span class=\"token number\">0</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>We need to install second one which is second one <code>siddhmistry/ros_rpi4</code> follow the following steps</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">xhost +\n<span class=\"token function\">docker</span> pull siddhmistry/ros_rpi4:armhf\n<span class=\"token function\">docker</span> container run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--name</span> ROS_RPI4 <span class=\"token parameter variable\">--net</span><span class=\"token operator\">=</span>host <span class=\"token parameter variable\">-e</span> <span class=\"token environment constant\">DISPLAY</span> siddhmistry/ros_rpi4:armhf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>Now it will take come time so have a <a href=\"https://www.buymeacoffee.com/mistrysiddh\">coffee</a> break</p>\n<h1 id=\"Step-7-Final-step\"><a href=\"#Step-7-Final-step\" class=\"headerlink\" title=\"Step 7 - Final step\"></a>Step 7 - Final step</h1><p>As by now you have noticed that a terminator has been popped up run the following command so that we can setup our ROS System</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> /opt/ros/noetic/setup.bash\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"source /opt/ros/noetic/setup.bash\"</span> <span class=\"token operator\">>></span> ~/.bashrc\n<span class=\"token builtin class-name\">source</span> ~/.bashrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>As we have completed all the steps try to run <code>roscore</code> if this commands works then you have successfully installed it. Press <code>Ctrl + C</code> to exit roscore after that type <code>exit</code> to exit it. Now that we have done everything we just need to install just a small thing which is called Portainer which will help to run this container easily</p>\n<h1 id=\"Step-8-Installing-Portainer\"><a href=\"#Step-8-Installing-Portainer\" class=\"headerlink\" title=\"Step 8 - Installing Portainer\"></a>Step 8 - Installing Portainer</h1><p>As we know we have already install docker so we will start installing Portainer so just follow the steps</p>\n<p>First, create the volume that Portainer Server will use to store its database:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> volume create portainer_data<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>Then, download and install the Portainer Server container:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8000</span>:8000 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">9443</span>:9443 <span class=\"token parameter variable\">--name</span> portainer <span class=\"token parameter variable\">--restart</span><span class=\"token operator\">=</span>always <span class=\"token parameter variable\">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class=\"token parameter variable\">-v</span> portainer_data:/data portainer/portainer-ce:latest<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>Portainer Server has now been installed. You can check to see whether the Portainer Server container has started by running <code>docker ps</code>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token function\">ps</span>\nCONTAINER ID   IMAGE                          COMMAND                  CREATED       STATUS      PORTS                                                                                  NAMES             \nde5b28eb2fa9   portainer/portainer-ee:latest  <span class=\"token string\">\"/portainer\"</span>             <span class=\"token number\">2</span> weeks ago   Up <span class=\"token number\">9</span> days   <span class=\"token number\">0.0</span>.0.0:8000-<span class=\"token operator\">></span><span class=\"token number\">8000</span>/tcp, :::8000-<span class=\"token operator\">></span><span class=\"token number\">8000</span>/tcp, <span class=\"token number\">0.0</span>.0.0:9443-<span class=\"token operator\">></span><span class=\"token number\">9443</span>/tcp, :::9443-<span class=\"token operator\">></span><span class=\"token number\">9443</span>/tcp   portainer<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>Now that the installation is complete, you can log into your Portainer Server instance by opening a web browser and going to: <a href=\"https://localhost:9443/\">portainer</a></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">https://localhost:9443<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>When you open the url you will be asked to steup admin username and password after login into the admin panel it looks like this</p>\n<p><img src=\"/images/posts/portainer-admin-panel.png\" alt=\"Portainer\"></p>\n<p>Here you will see a local enviroment click on it and this page will open it up:</p>\n<p><img src=\"/images/posts/portainer-admin-panel-env.png\" alt=\"Portainer Enviroment\"></p>\n<p>At the left side panel you will able to see <code>Containers</code> option. When you open that page it will grant you with some containers.</p>\n<p><img src=\"/images/posts/portainer-admin-panel-containers.png\" alt=\"Portainer Enviroment\"></p>\n<p>You will see that there is a container name <code>ROS_PI4</code> select it and press start anf baam it started working. Portainer is a tool where it will help you control your container and also to add more containers in it. I hope you loved it.</p>\n<h1 id=\"Mr-Blogger\"><a href=\"#Mr-Blogger\" class=\"headerlink\" title=\"Mr. Blogger\"></a>Mr. Blogger</h1><h2 id=\"Podcast\"><a href=\"#Podcast\" class=\"headerlink\" title=\"Podcast\"></a>Podcast</h2><iframe src=\"https://open.spotify.com/embed/show/6p14uYsO8NtWD8tM3wEd4o\" width=\"100%\" height=\"232\" frameBorder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe>\n\n<h2 id=\"Social-Media\"><a href=\"#Social-Media\" class=\"headerlink\" title=\"Social Media\"></a>Social Media</h2><ul>\n<li>Instagram - <a href=\"https://instagram.com/mistrysiddh\">https://instagram.com/mistrysiddh</a></li>\n<li>Github - <a href=\"https://guthub.com/mrfoxie\">https://guthub.com/mrfoxie</a></li>\n<li>Linkedin - <a href=\"https://www.linkedin.com/in/SiddhMistry/\">https://www.linkedin.com/in/SiddhMistry/</a></li>\n<li>Whatsapp - <a href=\"https://api.whatsapp.com/send?phone=916355040470&text=http://mistrysiddh.tk/\">Message Me</a></li>\n<li>Discord - <a href=\"https://discord.gg/bPrBSbQ2W4\">https://discord.gg/bPrBSbQ2W4</a></li>\n</ul>\n<h2 id=\"Donation\"><a href=\"#Donation\" class=\"headerlink\" title=\"Donation\"></a>Donation</h2><ul>\n<li>Paypal - <a href=\"https://paypal.me/mistrysiddh\">https://paypal.me/mistrysiddh</a></li>\n<li>Patreon - <a href=\"https://www.patreon.com/siddhmistry\">https://www.patreon.com/siddhmistry</a></li>\n<li>Buymeacoffee - <a href=\"https://www.buymeacoffee.com/mistrysiddh\">https://www.buymeacoffee.com/mistrysiddh</a></li>\n</ul>\n<h2 id=\"Play-Store\"><a href=\"#Play-Store\" class=\"headerlink\" title=\"Play Store\"></a>Play Store</h2><p><a href=\"https://bit.ly/2Vch9gi\"><img src=\"https://play.google.com/intl/en_us/badges/static/images/badges/en_badge_web_generic.png\" alt=\"Get it on Google Play\"></a></p>\n","feature":true,"text":" OverviewWe will be install ROS on Raspberry PI 4 without Ubuntu. In this tutorial we we will be using docker insted of using ubuntu or any ...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"Industrial automation","slug":"Industrial-automation","count":4,"path":"api/categories/Industrial-automation.json"},{"name":"Hacking","slug":"Industrial-automation/Hacking","count":3,"path":"api/categories/Industrial-automation/Hacking.json"},{"name":"website","slug":"Industrial-automation/Hacking/website","count":3,"path":"api/categories/Industrial-automation/Hacking/website.json"}],"tags":[{"name":"technology","slug":"technology","count":13,"path":"api/tags/technology.json"},{"name":"industrial automation","slug":"industrial-automation","count":6,"path":"api/tags/industrial-automation.json"},{"name":"Linux","slug":"Linux","count":6,"path":"api/tags/Linux.json"},{"name":"new site","slug":"new-site","count":4,"path":"api/tags/new-site.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Overview\"><span class=\"toc-text\">Overview</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Requirments\"><span class=\"toc-text\">Requirments</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Step-1-Hardware-setup\"><span class=\"toc-text\">Step 1 - Hardware setup</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Step-2-Booting-UP\"><span class=\"toc-text\">Step 2 - Booting UP</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Step-3-Software-setup\"><span class=\"toc-text\">Step 3 - Software setup</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Update-and-Upgradation-of-packages\"><span class=\"toc-text\">Update and Upgradation of packages</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Package-Installation\"><span class=\"toc-text\">Package Installation</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Step-4-Getting-docker\"><span class=\"toc-text\">Step 4 - Getting docker</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Step-5-Installing-Docker-composer\"><span class=\"toc-text\">Step 5 - Installing Docker composer</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Step-6-Installation-of-ROS-semi-final-step\"><span class=\"toc-text\">Step 6 - Installation of ROS (semi-final step)</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Step-7-Final-step\"><span class=\"toc-text\">Step 7 - Final step</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Step-8-Installing-Portainer\"><span class=\"toc-text\">Step 8 - Installing Portainer</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Mr-Blogger\"><span class=\"toc-text\">Mr. Blogger</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Podcast\"><span class=\"toc-text\">Podcast</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Social-Media\"><span class=\"toc-text\">Social Media</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Donation\"><span class=\"toc-text\">Donation</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Play-Store\"><span class=\"toc-text\">Play Store</span></a></li></ol></li></ol>","author":{"name":"Mr. Blogger","slug":"blog-author","avatar":"https://mistrysiddh.com/images/whoami/avatar.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"Raspberry Pi NAS System","uid":"f717b39904e12b2b9df9f31e7f83eb32","slug":"Raspberry-pi-NAS-System","date":"2022-02-11T08:47:46.000Z","updated":"2023-02-05T12:34:23.607Z","comments":true,"path":"api/articles/Raspberry-pi-NAS-System.json","keywords":null,"cover":"https://i.ytimg.com/vi/Jc4Y2jA4Yeg/maxresdefault.jpg","text":" OverviewWe will be seeing a fully functional NAS server on Raspberry Pi(all pi version) homemade with simple few lines of command and with ...","link":"","photos":[],"count_time":{"symbolsCount":"9.9k","symbolsTime":"9 mins."},"categories":[{"name":"Industrial automation","slug":"Industrial-automation","count":4,"path":"api/categories/Industrial-automation.json"},{"name":"Hacking","slug":"Industrial-automation/Hacking","count":3,"path":"api/categories/Industrial-automation/Hacking.json"},{"name":"website","slug":"Industrial-automation/Hacking/website","count":3,"path":"api/categories/Industrial-automation/Hacking/website.json"}],"tags":[{"name":"technology","slug":"technology","count":13,"path":"api/tags/technology.json"},{"name":"industrial automation","slug":"industrial-automation","count":6,"path":"api/tags/industrial-automation.json"},{"name":"Linux","slug":"Linux","count":6,"path":"api/tags/Linux.json"},{"name":"new site","slug":"new-site","count":4,"path":"api/tags/new-site.json"}],"author":{"name":"Mr. Blogger","slug":"blog-author","avatar":"https://mistrysiddh.com/images/whoami/avatar.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}